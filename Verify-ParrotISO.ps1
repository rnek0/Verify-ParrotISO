<#
.SYNOPSIS
    V√©rifie l'int√©grit√© et l'authenticit√© d'une image ISO de Parrot Security OS.

.DESCRIPTION
    Ce script PowerShell t√©l√©charge les fichiers n√©cessaires (ISO, hash sign√©, cl√© GPG),
    v√©rifie la signature GPG du fichier de hash, calcule le hash SHA512 de l'image ISO,
    et compare les deux pour confirmer que le fichier est authentique et non alt√©r√©.

.PARAMETER Force
    Force le t√©l√©chargement des fichiers m√™me s'ils existent d√©j√† localement.

.PARAMETER DryRun
    Simule l'ex√©cution du script sans effectuer de t√©l√©chargement ni de modification.

.EXAMPLE
    .\Verify-ParrotISO.ps1
    V√©rifie l'image ISO en utilisant les fichiers d√©j√† pr√©sents ou les t√©l√©charge si absents.

.EXAMPLE
    .\Verify-ParrotISO.ps1 -Force
    Force le t√©l√©chargement des fichiers avant de proc√©der √† la v√©rification.

.EXAMPLE
    .\Verify-ParrotISO.ps1 -DryRun
    Simule l'ex√©cution sans t√©l√©chargement ni v√©rification r√©elle.

.NOTES
    Auteur : rnek0 & Copilot
    Date   : Ao√ªt 2025
    Version: 1.0

.REQUIREMENTS
    - PowerShell 5.0+
    - gpg (GnuPG)
    - Get-FileHash
    - Invoke-WebRequest
    - Select-String
#>

param (
    [switch]$Force,
    [switch]$DryRun
)

# üß™ V√©rification de la version de PowerShell (>= 7.0)
if ($PSVersionTable.PSVersion.Major -lt 7) {
    Write-Host "‚ùå Ce script n√©cessite PowerShell 7.0 ou sup√©rieur." -ForegroundColor Red
    exit 1
}

# V√©rification des droits d'administrateur
function Test-IsAdministrator {
    # Cas Docker : on ignore la v√©rification
    # V√©rifie si on est dans Docker (Linux)
    $IsDocker = Test-Path "/.dockerenv"
    if ($IsDocker) {
        Write-Host "üõ°Ô∏è Ex√©cution dans un conteneur Docker ‚Äî v√©rification d'administrateur ignor√©e."
        return $true
    }

    # Cas Windows
    if ($IsWindows) {
        try {
            $identity = [Security.Principal.WindowsIdentity]::GetCurrent()
            $principal = New-Object Security.Principal.WindowsPrincipal($identity)
            return $principal.IsInRole([Security.Principal.WindowsBuiltInRole]::Administrator)
        }
        catch {
            Write-Warning "‚ö†Ô∏è Impossible de v√©rifier les privil√®ges administrateur sur Windows : $_"
            return $false
        }
    }

    # Cas Linux/macOS
    if ($IsLinux -or $IsMacOS) {
        return ($env:USER -eq "root")
    }

    # OS non support√©
    Write-Warning "‚ùå Syst√®me d'exploitation non reconnu. V√©rification des privil√®ges impossible."
    return $false
}


if (-not $DryRun -and -not (Test-IsAdministrator)) {
    Write-Host "‚ùå Ce script doit √™tre ex√©cut√© en tant qu‚Äôadministrateur pour fonctionner normalement." -ForegroundColor Yellow
    Write-Host "   Relancez PowerShell en mode Administrateur, puis r√©ex√©cutez la commande." -ForegroundColor Yellow
    exit 1
}


# V√©rification des d√©pendances
function Test-Command($command) {
    if (-not (Get-Command $command -ErrorAction SilentlyContinue)) {
        Write-Host "‚ùå Erreur : la commande '$command' est introuvable. Veuillez l‚Äôinstaller." -ForegroundColor Red
        exit 1
    }
}

Test-Command "gpg"
Test-Command "Get-FileHash"
Test-Command "Invoke-WebRequest"
Test-Command "Select-String"

Write-Host "‚úÖ Tous les outils n√©cessaires sont disponibles.`n"

# URLs et fichiers
$isoUrl = "https://deb.parrot.sh/parrot/iso/6.4/Parrot-security-6.4_amd64.iso"
$hashesUrl = "https://deb.parrot.sh/parrot/iso/6.4/signed-hashes.txt"
$keyUrl = "https://deb.parrot.sh/parrot/misc/archive.gpg"

$isoFile = "Parrot-security-6.4_amd64.iso"
$hashesFile = "signed-hashes.txt"
$keyFile = "archive.gpg"

# T√©l√©chargement conditionnel des fichiers
Write-Host "üîÑ T√©l√©chargement des fichiers n√©cessaires..."
function Search-IfMissing {
    param (
        [string]$Url,
        [string]$OutFile
    )

    if ($DryRun) {
        Write-Host "üß™ [DryRun] Simulation du t√©l√©chargement de $OutFile depuis $Url"
    }
    elseif ($Force -or -not (Test-Path $OutFile)) {
        Write-Host "üì• T√©l√©chargement de $OutFile..."
        Invoke-WebRequest -Uri $Url -OutFile $OutFile
    }
    else {
        Write-Host "‚úÖ $OutFile d√©j√† pr√©sent, t√©l√©chargement ignor√©."
    }
}

Search-IfMissing -Url $isoUrl -OutFile $isoFile
Search-IfMissing -Url $hashesUrl -OutFile $hashesFile
Search-IfMissing -Url $keyUrl -OutFile $keyFile

# Importation de la cl√© dans archive.gpg
Write-Host "`nüîë Importation de la cl√© GPG dans $keyFile ..."
if (-not $DryRun) { gpg --import $keyFile }

# Fonction pour r√©cup√©rer la cl√© GPG avec fallback
# Si la r√©cup√©ration via WKD √©choue, on essaie les keyservers
function Get-GpgKeyWithFallback {
    param (
        [Parameter(Mandatory = $true)]
        [string]$Email,

        [Parameter(Mandatory = $true)]
        [string]$KeyID
    )

    Write-Host "üîç Tentative de r√©cup√©ration de la cl√© pour $Email via WKD..."
    gpg --locate-keys $Email
    if ($LASTEXITCODE -eq 0) {
        Write-Host "‚úÖ Cl√© r√©cup√©r√©e via WKD."
        return
    }

    Write-Host "‚ö†Ô∏è √âchec via WKD. Tentative via keyservers..."

    $keyservers = @(
        "hkps://keyserver.ubuntu.com",
        "hkps://keys.openpgp.org",
        "hkps://pgp.mit.edu"
    )

    foreach ($server in $keyservers) {
        Write-Host "üîÑ Tentative via $server..."
        gpg --keyserver $server --recv-keys $KeyID
        if ($LASTEXITCODE -eq 0) {
            Write-Host "‚úÖ Cl√© r√©cup√©r√©e via $server."
            return
        }
    }

    Write-Host "‚ùå √âchec de la r√©cup√©ration de la cl√© via tous les serveurs." -ForegroundColor Red
    exit 1
}


# V√©rification de la signature
if ($DryRun) {
    Write-Host "`nüß™ [DryRun] Simulation de la v√©rification de la signature"
}
else {
    Write-Host "`n‚úÖ V√©rification de la signature du fichier signed-hashes.txt‚Ä¶"
    if (-not (Test-Path $hashesFile)) {
        Write-Host "‚ùå Le fichier $hashesFile est introuvable. T√©l√©chargement n√©cessaire." -ForegroundColor Red
        Search-IfMissing -Url $hashesUrl -OutFile $hashesFile
    }
    # R√©cup√©ration manuelle de la cl√© via un keyserver
    Write-Host "üîÑ Import de la cl√© de signature pour Parrot Security OS..."
    #Get-GpgKeyWithFallback -Email "team@parrotsec.org" -KeyID "B711822346552E4D92DA02DF7A8286AF0E81EE4A"
    Get-GpgKeyWithFallback -Email "team@parrotsec.org" -KeyID "7A8286AF0E81EE4A"


    
    # V√©rification de la signature
    gpg --verify $hashesFile
    # On v√©rifie le code de sortie de la commande gpg
    # Si la signature est valide, le code de sortie est 0   
    # Si √©chec, on stoppe tout
    if ($LASTEXITCODE -ne 0) {
        Write-Host "`n‚ùå La signature PGP n‚Äôa pas pu √™tre v√©rifi√©e. Arr√™t du script." -ForegroundColor Red
        exit 1
    }
    Write-Host "‚úÖ La signature du fichier $hashesFile est valide." -ForegroundColor Green
}

# Extraction du hash attendu
Write-Host "`nüîç Extraction du hash attendu (SHA512)‚Ä¶"
if ($DryRun) {
    Write-Host "üß™ [DryRun] Simulation de l'extraction du hash SHA512 pour $isoFile"
    $expectedHash = "<simulation>"
}
else {
    # On ne garde que la ligne SHA512 : 128 hex digits + espace(s) + nom du fichier
    $pattern = '^[0-9A-Fa-f]{128}\s+' + [regex]::Escape($isoFile) + '$'
    $line = Get-Content $hashesFile | Where-Object { $_ -match $pattern }
    if (-not $line) {
        Write-Host "‚ùå Impossible de trouver le SHA512 dans $hashesFile." -ForegroundColor Red
        exit 1
    }

    # On splitte la ligne unique et on prend la premi√®re colonne
    $expectedHash = ($line -split '\s+')[0]
}

# Calcul du hash r√©el
if ($DryRun) {
    Write-Host "`nüß™ [DryRun] Simulation du calcul du hash SHA512"
    $computedHash = "<simulation>"
}
else {
    Write-Host "`nüîÑ Calcul du hash r√©el du fichier ISO..."
    $computedHash = (Get-FileHash -Path $isoFile -Algorithm SHA512).Hash
}

# Comparaison des hash
Write-Host "`nüîê Comparaison des hash..."
if ($DryRun) {
    Write-Host "`nüß™ [DryRun] Simulation de la comparaison : attendu=$expectedHash vs calcul√©=$computedHash"
}
elseif ([string]::Equals($computedHash, $expectedHash, [System.StringComparison]::OrdinalIgnoreCase)) {
    Write-Host "`n‚úÖ Le fichier ISO est int√®gre et sign√© par Parrot Security." -ForegroundColor Green
}
else {
    Write-Host "`n‚ùå Le hash ne correspond pas. Le fichier peut √™tre corrompu ou falsifi√©." -ForegroundColor Red
    exit 1
}

# ü¶ú Easter Egg
function Show-Parrot {
    @"
        .--.
       |o_o |
       |:_/ |
      //   \ \
     (|     | )
    /'\_   _/`\
    \___)=(___/

 ü¶ú Parrot Security OS ‚Äî Stay safe, stay curious!
"@ | Write-Host -ForegroundColor Cyan
}

Show-Parrot
